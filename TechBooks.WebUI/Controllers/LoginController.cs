using System;
using System.Configuration;
using System.Data.SqlClient;
using System.Security.Cryptography;
using System.Text;
using System.Web.Mvc;
using System.Web.Security;
using TechBooks.Data.ADO.Net;
using TechBooks.Models;
using TechBooks.WebUI.Models;

namespace TechBooks.WebUI.Controllers
{
    public class LoginController : CommonBaseClass
    {
        #region Support methods
        public string ComputePasswordHash(string userName, string password)
        {
            string pepper = ConfigurationManager.AppSettings["Pepper"];
            int keySizeInBytes = 64; // 64 corresponds to 512 bits
            int iterations = 100000; // Sets the number of iterations for the PBKDF2 hashing algorithm. More iterations make brute-force attacks slower, as it increases the time it takes to generate each hash.
            var hashAlgorithName = HashAlgorithmName.SHA512; // Specifies the hash algorithm to use (SHA-512 in this case), which produces a 512-bit (64-byte) hash.
            var salt = ComputeSalt(userName, pepper); // The value generated by the ComputeSalt method, which helps prevent rainbow table attacks
            var r = new Rfc2898DeriveBytes(password, salt, iterations, hashAlgorithName); // Initializes the Rfc2898DeriveBytes class, which implements the PBKDF2 algorithm.
            string result = Convert.ToBase64String(r.GetBytes(keySizeInBytes));
            return result;
        }

        public byte[] ComputeSalt(string userName, string pepper)
        {
            byte[] result = Encoding.UTF8.GetBytes(userName + pepper);
            return result;
        }
        #endregion

        public ActionResult SignIn()
        {
            return View();
        }

        public ActionResult Register()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult SignIn(User user)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    using (var cn = new SqlConnection(ConnectionString))
                    {
                        string passwordHash = ComputePasswordHash(user.Email, user.Password);
                        user.Password = passwordHash;

                        if (!UserData.UserAndPasswordAreValid(user, cn))
                        {
                            throw new Exception("Invalid e-mail or password");
                        }
                        else
                        {
                            string returnUrl = Url.Action("Index", "Home");

                            // Check if there's a referrer and if it contains the ReturnUrl
                            if (Request.UrlReferrer != null)
                            {
                                var query = Request.UrlReferrer.Query;
                                var queryDictionary = System.Web.HttpUtility.ParseQueryString(query);
                                returnUrl = queryDictionary["ReturnUrl"] ?? returnUrl;
                            }

                            FormsAuthentication.SetAuthCookie(user.Email, false);

                            //THIS APPROACH DOES NOT WORK:
                            //FormsAuthentication.RedirectFromLoginPage(user.Email, true); 

                            return Redirect(returnUrl);
                        }

                    }
                }
                catch (Exception ex)
                {
                    TempData["DangerMessage"] = ex.Message;
                }
            }

            return View(user);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Register(RegisterViewModel newUser)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    using (var cn = new SqlConnection(ConnectionString))
                    {
                        string passwordHash = ComputePasswordHash(newUser.Email, newUser.Password);
                        var user = new User() { Email = newUser.Email, Password = passwordHash };

                        if (!UserData.UserIsUnique(user.Email, cn))
                        {
                            throw new Exception("This e-mail address is already registered");
                        }

                        UserData.Insert(user, cn);
                        return View("Success");
                    }
                }
                catch (Exception ex)
                {
                    TempData["DangerMessage"] = ex.Message;
                }
            }

            return View(newUser);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult SignOut()
        {
            FormsAuthentication.SignOut();
            return RedirectToAction("Index", "Home");
        }
    }
}
